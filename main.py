# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\own\computer_visual_hw2\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import cv2
import numpy as np
import matplotlib.pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets

import torch
import torch.nn as nn
from torchvision import datasets ,models,transforms
from torch.utils.data.sampler import SubsetRandomSampler
from torch.optim import lr_scheduler
from pathlib import Path
from matplotlib import pyplot as plt
import torch.nn.functional as F
from torch.autograd import Variable
# from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from random import seed,randint


coin01_path='Datasets/Q1_Image/coin01.jpg'
coin01=cv2.imread(coin01_path)
coin02_path='Datasets/Q1_Image/coin02.jpg'
coin02=cv2.imread(coin02_path)

infomation=['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15']

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1077, 581)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(20, 30, 341, 241))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(70, 40, 171, 41))
        self.pushButton.setObjectName("pushButton")
        #1.1
        self.pushButton.clicked.connect(draw_contour)

        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(70, 100, 171, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        #1.2
        self.pushButton_2.clicked.connect(self.count_coin)

        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(40, 160, 231, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(40, 190, 231, 31))
        self.label_2.setObjectName("label_2")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(390, 40, 291, 101))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_3.setGeometry(QtCore.QRect(30, 30, 231, 51))
        self.pushButton_3.setObjectName("pushButton_3")

        #3
        self.pushButton_3.clicked.connect(Augmented_Reality)

        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(390, 170, 291, 101))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_4.setGeometry(QtCore.QRect(30, 30, 231, 51))
        self.pushButton_4.setObjectName("pushButton_4")

        #4
        self.pushButton_4.clicked.connect(stero_disparity)

        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(30, 300, 651, 231))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setObjectName("groupBox_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_5.setGeometry(QtCore.QRect(70, 40, 161, 41))
        self.pushButton_5.setObjectName("pushButton_5")

        #2.1 corner detection
        self.pushButton_5.clicked.connect(Corner_Detection)


        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_6.setGeometry(QtCore.QRect(70, 100, 161, 41))
        self.pushButton_6.setObjectName("pushButton_6")

        #2.2 intrinsic_matrix
        self.pushButton_6.clicked.connect(intrinsic_matrix)

        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_7.setGeometry(QtCore.QRect(70, 160, 161, 41))
        self.pushButton_7.setObjectName("pushButton_7")

        #2.4 Distortion_Matrix
        self.pushButton_7.clicked.connect(Distortion_Matrix)

        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_4)
        self.groupBox_5.setGeometry(QtCore.QRect(360, 40, 241, 151))
        self.groupBox_5.setObjectName("groupBox_5")
        self.label_3 = QtWidgets.QLabel(self.groupBox_5)
        self.label_3.setGeometry(QtCore.QRect(40, 30, 131, 21))
        self.label_3.setObjectName("label_3")
        self.comboBox = QtWidgets.QComboBox(self.groupBox_5)
        self.comboBox.setGeometry(QtCore.QRect(40, 60, 69, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItems(infomation)
        self.pushButton_8 = QtWidgets.QPushButton(self.groupBox_5)
        self.pushButton_8.setGeometry(QtCore.QRect(40, 100, 161, 41))
        self.pushButton_8.setObjectName("pushButton_8")

        #2.4 extrinsic_matrix
        self.pushButton_8.clicked.connect(self.extrinsic_matrix)

        self.groupBox_6 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_6.setGeometry(QtCore.QRect(730, 40, 281, 471))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setObjectName("groupBox_6")
        self.pushButton_9 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_9.setGeometry(QtCore.QRect(50, 30, 191, 51))
        self.pushButton_9.setObjectName("pushButton_9")

        #5.1 Show_training_epoch
        self.pushButton_9.clicked.connect(Show_training_epoch)

        self.pushButton_10 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_10.setGeometry(QtCore.QRect(50, 140, 191, 51))
        self.pushButton_10.setObjectName("pushButton_10")

        #5.1 Show_Acc_Loss
        self.pushButton_10.clicked.connect(Show_Acc_Loss)

        self.pushButton_11 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_11.setGeometry(QtCore.QRect(50, 250, 191, 51))
        self.pushButton_11.setObjectName("pushButton_11")

        #5.3 Random_test
        self.pushButton_11.clicked.connect(Random_test)

        self.pushButton_12 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_12.setGeometry(QtCore.QRect(50, 370, 191, 51))
        self.pushButton_12.setObjectName("pushButton_12")

        #5.4 Compare_Acc()
        self.pushButton_12.clicked.connect(Compare_Acc)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    #1.2 count coin
    def count_coin(self):
        try:
            self.label.setText('There are {} coins in coin01.jpg'.format(coin01_detect_num))
            self.label_2.setText('There are {} coins in coin02.jpg'.format(coin02_detect_num))
        except:
            print('please run 1.1 Draw contour first')

    #2.3 extrinsic_matrix
    def extrinsic_matrix(self):
        obj_p = np.zeros((8 * 11, 3), np.float32)
        obj_p[:,:2] = np.mgrid[0:11, 0:8].T.reshape(-1 , 2)    
        obj_ps, img_ps, mtx, dist = [], [], [], []

        for i in range(1, 15):
            filename = 'Datasets/Q2_Image/' + str(i) + '.bmp'
            img = cv2.imread(filename)
            gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            ret, corners = cv2.findChessboardCorners(gray, (11, 8), None)
            if ret:
                obj_ps.append(obj_p)
                img_ps.append(corners)
    
        ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(obj_ps, img_ps, gray.shape[::-1], None, None)

        a=int(self.comboBox.currentText())
        r=(rvecs[a-2][0][0],rvecs[a-2][1][0],rvecs[a-2][2][0])
        t=tvecs[a-2]    
        R=cv2.Rodrigues(r)
        E=np.hstack((R[0],t))
        print(E)
        
        
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "1. Find Contour"))
        self.pushButton.setText(_translate("MainWindow", "1.1 Draw Contour"))
        self.pushButton_2.setText(_translate("MainWindow", "1.2 Count Coins"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">There are _ coins in coin01.jpg</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">There are _ coins in coin02.jpg</span></p></body></html>"))
        self.groupBox_2.setTitle(_translate("MainWindow", "3. Augmented Reality "))
        self.pushButton_3.setText(_translate("MainWindow", "3.1 Augmented Reality "))
        self.groupBox_3.setTitle(_translate("MainWindow", "4. Stereo Disparity Map"))
        self.pushButton_4.setText(_translate("MainWindow", "4.1 Stereo Disparity Map"))
        self.groupBox_4.setTitle(_translate("MainWindow", "2. Calibration"))
        self.pushButton_5.setText(_translate("MainWindow", "2.1 Find Corners"))
        self.pushButton_6.setText(_translate("MainWindow", "2.2 Find Instrinsic"))
        self.pushButton_7.setText(_translate("MainWindow", "2.4 Find Distortion"))
        self.groupBox_5.setTitle(_translate("MainWindow", "2.3 FInd Extrinsic"))
        self.label_3.setText(_translate("MainWindow", "Select image"))
        self.pushButton_8.setText(_translate("MainWindow", "Find Extrinsic"))
        self.groupBox_6.setTitle(_translate("MainWindow", "5. Dogs and Cats classification "))
        self.pushButton_9.setText(_translate("MainWindow", "Show Training Epoch"))
        self.pushButton_10.setText(_translate("MainWindow", "Show Acc / Loss"))
        self.pushButton_11.setText(_translate("MainWindow", "Random Test"))
        self.pushButton_12.setText(_translate("MainWindow", "Compare Acc"))


#1.1 coin01_contour
def draw_contour(): 

    #coin1
    img=cv2.cvtColor(coin01,cv2.COLOR_RGB2GRAY)   
    img_blur=cv2.GaussianBlur(coin01,(5,5),0)
    edge=cv2.Canny(img_blur,1,500)
    contours=cv2.findContours(edge.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)
    coin=cv2.imread(coin01_path)
    cv2.drawContours(coin, contours[0], -1, (0,0,255), thickness = 2)

    #coin2
    img2=cv2.cvtColor(coin02,cv2.COLOR_RGB2GRAY)   
    img_blur2=cv2.GaussianBlur(coin02,(5,5),0)
    edge2=cv2.Canny(img_blur2,1,300)
    contours2=cv2.findContours(edge2.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)
    coin2=cv2.imread(coin02_path)
    cv2.drawContours(coin2, contours2[0], -1, (0,0,255), thickness = 2)

    global coin01_detect_num
    coin01_detect_num=len(contours[0]) 
    global coin02_detect_num
    coin02_detect_num=len(contours2[0]) 
    # edge_rgb=cv2.cvtColor(edge,cv2.COLOR_GRAY2BGR)
    # edge_rgb=edge_rgb*np.array((0,0,1),np.uint8)
    # res=cv2.add(edge_rgb,coin01)   
    res1=np.hstack([coin01,coin])
    res2=np.hstack([coin02,coin2])
    cv2.imshow('Coin01 Draw Contours',res1)
    cv2.imshow('Coin02 Draw Contours',res2)         
    cv2.waitKey(0)

#2.1 Corner_Detection 
def Corner_Detection():
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)
    obj_p = np.zeros((8 * 11, 3), np.float32)
    obj_p[:,:2] = np.mgrid[0:11, 0:8].T.reshape(-1 , 2)    
    obj_ps, img_ps = [], []

    files, imgs = [], []
    for i in range(1, 16):
        files.append('Datasets/Q2_Image/'+ str(i) + '.bmp')

    for h, filename in enumerate(files):
        img=cv2.imread(filename)
        gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        ret, corners = cv2.findChessboardCorners(gray, (11,8), None)
        if ret:
            obj_ps.append(obj_p)
            corners2 = cv2.cornerSubPix(gray,corners, (11,11), (-1,-1), criteria)
            img_ps.append(corners)
            cv2.drawChessboardCorners(img,(8,11),corners2,ret)
            imgs.append(img)

    for i in range(1,16):
        img=cv2.resize(imgs[i-1],(600,600))
        cv2.imshow('{}'.format(i),img) 
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    
    cv2.waitKey(0)
    # res=np.hstack(imgs)
    # res=cv2.resize(res,(4192,300))
    # cv2.imshow('hi',res)  
    # cv2.waitKey(0)

#2.2 Intrinsic_matrix
def intrinsic_matrix():
    obj_p = np.zeros((8 * 11, 3), np.float32)
    obj_p[:,:2] = np.mgrid[0:11, 0:8].T.reshape(-1 , 2)    
    obj_ps, img_ps, mtx, dist = [], [], [], []
    
    for i in range(1, 15):
        filename = 'Datasets/Q2_Image/' + str(i) + '.bmp'
        img = cv2.imread(filename)
        gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        ret, corners = cv2.findChessboardCorners(gray, (11, 8), None)
        if ret:
            obj_ps.append(obj_p)
            img_ps.append(corners)
	
    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(obj_ps, img_ps, gray.shape[::-1], None, None)
    print(mtx)


#2.4 Distortion Matrix 
def Distortion_Matrix ():
    obj_p = np.zeros((8 * 11, 3), np.float32)
    obj_p[:,:2] = np.mgrid[0:11, 0:8].T.reshape(-1 , 2)    
    obj_ps, img_ps, mtx, dist = [], [], [], []
    for i in range(1, 15):
        filename = 'Datasets/Q2_Image/' + str(i) + '.bmp'
        img = cv2.imread(filename)
        gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        ret, corners = cv2.findChessboardCorners(gray, (11, 8), None)
        if ret:
            obj_ps.append(obj_p)
            img_ps.append(corners)
	
    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(obj_ps, img_ps, gray.shape[::-1], None, None)
    print(dist)


#3 Augmented_Reality 
def Augmented_Reality():
    obj_p = np.zeros((8 * 11, 3), np.float32)
    obj_p[:,:2] = np.mgrid[0:11, 0:8].T.reshape(-1 , 2)    
    obj_ps, img_ps, mtx, dist = [], [], [], []
    
    for i in range(1, 6):
        filename = 'Datasets/Q3_Image/' + str(i) + '.bmp'
        img = cv2.imread(filename)
        gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        ret, corners = cv2.findChessboardCorners(gray, (11, 8), None)
        if ret:
            obj_ps.append(obj_p)
            img_ps.append(corners)
	
    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(obj_ps, img_ps, gray.shape[::-1], None, None)
    axis = np.float32([[1, 1, 0], [1, 5, 0], [5, 5, 0], [5, 1, 0], [3, 3, -4]])
	
    files, imgs = [], []
    for i in range(1, 6):
        files.append('Datasets/Q3_Image/'+ str(i) + '.bmp')
    
    for h, filename in enumerate(files):
        img = cv2.imread(filename)
        gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        ret, corners = cv2.findChessboardCorners(gray, (11, 8), None)
        if ret:	
            imgpts, jac = cv2.projectPoints(axis, rvecs[h], tvecs[h], mtx, dist)
			
            pt1 = tuple(imgpts[0].ravel())
            pt2 = tuple(imgpts[1].ravel())
            pt3 = tuple(imgpts[2].ravel())
            pt4 = tuple(imgpts[3].ravel())
            pt5 = tuple(imgpts[4].ravel())
			
            img = cv2.line(img, pt1, pt2, (0, 0, 255), 10)
            img = cv2.line(img, pt2, pt3, (0, 0, 255), 10)
            img = cv2.line(img, pt3, pt4, (0, 0, 255), 10)
            img = cv2.line(img, pt1, pt4, (0, 0, 255), 10)
            img = cv2.line(img, pt1, pt5, (0, 0, 255), 10)
            img = cv2.line(img, pt2, pt5, (0, 0, 255), 10)
            img = cv2.line(img, pt3, pt5, (0, 0, 255), 10)
            img = cv2.line(img, pt4, pt5, (0, 0, 255), 10)
            
            imgs.append(img)	
            height, width = img.shape[:2]
    output = cv2.VideoWriter('Augmented_Reality .avi', cv2.VideoWriter_fourcc('M', 'J', 'P', 'G'), 2, (width, height)) # 2 fps
    
    for i in range(len(imgs)):
        output.write(imgs[i])
    output.release()	
    
    cap = cv2.VideoCapture('Augmented_Reality .avi')
    if (cap.isOpened() == False):
        print('Already opened! ')
        
    while(cap.isOpened()):
        ret, frame = cap.read()
        if ret:
            cv2.namedWindow('Augmented_Reality _Frame', cv2.WINDOW_NORMAL)
            cv2.imshow('Augmented_Reality _Frame', frame)
            if cv2.waitKey(500) & 0xFF == ord('q'):
                break
        else:
            break
        
    cap.release()
    cv2.destroyAllWindows()

#4 Stero_Disparity
def stero_disparity():
    imgL = cv2.imread('Datasets/Q4_Image/imgL.png',0)
    imgR = cv2.imread('Datasets/Q4_Image/imgR.png',0)
    # imgL = cv2.resize(imgL, (960, 540))
    # imgR = cv2.resize(imgR, (960, 540))
    
    # cv2.namedWindow('Left Image')
    # cv2.imshow('Left Image', imgL)
    # cv2.namedWindow('Right Image')
    # cv2.imshow('Right Image', imgR)
    stereo = cv2.StereoBM_create(numDisparities=16*14, blockSize=29)
    global disparity
    disparity = stereo.compute(imgL,imgR)
    disparity = cv2.normalize(disparity, disparity, alpha=0, beta=255,
                             norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)

    global ax
    global implot
    ax = plt.gca()
    implot = ax.imshow(disparity, 'gray')
    plt.axis('off')
    ax.set_title('disparity map')
    cid = implot.figure.canvas.mpl_connect('button_press_event', onclick)
    plt.show()
    # implot.figure.canvas.mpl_disconnect(cid)
def onclick(event):
    global disp
    global ax, implot
    if event.xdata != None and event.ydata != None:
        x, y = int(event.xdata), int(event.ydata)
        dispVal = int(disparity[y][x])
        baseline = 178
        focal = 2826
        crMinusCl = 123
        if dispVal != 0:
            depth = int(baseline * focal / (dispVal+crMinusCl))
            text = 'Disparity : '+str(dispVal)+' pixels\nDepth : '+str(depth)+' mm'
        else:
            text = 'Disparity : '+str(dispVal)+' pixels\nDepth : infinite'

        ax.set_title(text,loc='right')
        implot.figure.canvas.draw()
    

#5.1 Show Training Epoch
def Show_training_epoch():
    img=cv2.imread('model1_epoch.PNG')
    cv2.imshow('Show_training_epoch',img)
    cv2.waitKey(0)

#5.2 Show Acc / Loss
def Show_Acc_Loss():
    img=cv2.imread('model1.PNG')
    cv2.imshow('Show_Acc_Loss',img)
    cv2.waitKey(0)


#5.3 Random test
def Random_test():
    a=randint(0,1000)
    img_path='Datasets/test/'+str(a)+ '.jpg'
    img=plt.figure()
    plt.title('class :')
    test_img=plt.imread(img_path,'jpg')
    test_transforms = transforms.Compose([
                                      transforms.ToTensor(),
                                      transforms.Normalize([0.485, 0.456, 0.406],
                                                           [0.229, 0.224, 0.225])])
    #load model
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model_path='model_CNN2.pth'
    model = models.resnet50()
    model.load_state_dict(torch.load(model_path))
    model.eval()
    # print(model)

    #image transfer to tensor
    img_tensor=test_transforms(test_img)
    img_tensor.to(device)
    img_tensor=img_tensor.unsqueeze(0)

    #predict
    label_dict={0:"cat",1:"dog"}
    out = model(img_tensor)
    _, indices = torch.sort(out,descending=True)
    percentage = torch.nn.functional.softmax(out, dim=1)[0] * 100
    if percentage[0].item() > percentage[1].item():
        plt.title('class :'+label_dict[0])
    else:
        plt.title('class :'+label_dict[1])
    plt.imshow(test_img)
    plt.show()


#5.4 Compare_Acc
def Compare_Acc():
    label_list=['Before Resize','After Resize']# 分別為資料夾中的model_CNN跟model_CNN2
    Acc_list=[55,60]# 跑val.py(預測準確率的程式檔)分別跑出來的結果
    bar=plt.figure()
    plt.bar(label_list,Acc_list)
    plt.title('Resize augmentation comparison(10 epoch only)')
    plt.show()

if __name__ == "__main__":
   import sys
   app = QtWidgets.QApplication(sys.argv)
   MainWindow = QtWidgets.QMainWindow()
   ui = Ui_MainWindow()
   ui.setupUi(MainWindow)
   MainWindow.show()
   sys.exit(app.exec_())